### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type EventType {
  allowedPassTypes(after: String, before: String, first: Int, last: Int, skip: Int): [PassType!]
  id: ID!
  name: String!
}

input EventTypeCreateInput {
  allowedPassTypes: PassTypeCreateManyWithoutAllowedPassTypesInput
  id: ID
  name: String!
}

input EventTypeCreateManyWithoutAllowedEventTypesInput {
  connect: [EventTypeWhereUniqueInput!]
  create: [EventTypeCreateWithoutAllowedPassTypesInput!]
}

input EventTypeCreateWithoutAllowedPassTypesInput {
  id: ID
  name: String!
}

input EventTypeUpdateInput {
  allowedPassTypes: PassTypeUpdateManyWithoutAllowedEventTypesInput
  name: String
}

input EventTypeWhereUniqueInput {
  id: ID
}

type Mutation {
  createOneEventType(data: EventTypeCreateInput!): EventType!
  createOnePassType(data: PassTypeCreateInput!): PassType!
  updateOneEventType(data: EventTypeUpdateInput!, where: EventTypeWhereUniqueInput!): EventType
}

type PassType {
  allowedEventTypes(after: String, before: String, first: Int, last: Int, skip: Int): [EventType!]
  id: ID!
  name: String!
}

input PassTypeCreateInput {
  allowedEventTypes: EventTypeCreateManyWithoutAllowedEventTypesInput
  id: ID
  name: String!
}

input PassTypeCreateManyWithoutAllowedPassTypesInput {
  connect: [PassTypeWhereUniqueInput!]
  create: [PassTypeCreateWithoutAllowedEventTypesInput!]
}

input PassTypeCreateWithoutAllowedEventTypesInput {
  id: ID
  name: String!
}

input PassTypeScalarWhereInput {
  AND: [PassTypeScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [PassTypeScalarWhereInput!]
  OR: [PassTypeScalarWhereInput!]
}

input PassTypeUpdateManyDataInput {
  name: String
}

input PassTypeUpdateManyWithoutAllowedEventTypesInput {
  connect: [PassTypeWhereUniqueInput!]
  create: [PassTypeCreateWithoutAllowedEventTypesInput!]
  delete: [PassTypeWhereUniqueInput!]
  deleteMany: [PassTypeScalarWhereInput!]
  disconnect: [PassTypeWhereUniqueInput!]
  set: [PassTypeWhereUniqueInput!]
  update: [PassTypeUpdateWithWhereUniqueWithoutAllowedEventTypesInput!]
  updateMany: [PassTypeUpdateManyWithWhereNestedInput!]
  upsert: [PassTypeUpsertWithWhereUniqueWithoutAllowedEventTypesInput!]
}

input PassTypeUpdateManyWithWhereNestedInput {
  data: PassTypeUpdateManyDataInput!
  where: PassTypeScalarWhereInput!
}

input PassTypeUpdateWithoutAllowedEventTypesDataInput {
  name: String
}

input PassTypeUpdateWithWhereUniqueWithoutAllowedEventTypesInput {
  data: PassTypeUpdateWithoutAllowedEventTypesDataInput!
  where: PassTypeWhereUniqueInput!
}

input PassTypeUpsertWithWhereUniqueWithoutAllowedEventTypesInput {
  create: PassTypeCreateWithoutAllowedEventTypesInput!
  update: PassTypeUpdateWithoutAllowedEventTypesDataInput!
  where: PassTypeWhereUniqueInput!
}

input PassTypeWhereUniqueInput {
  id: ID
}

type Query {
  findManyEventType(after: String, before: String, first: Int, last: Int, skip: Int): [EventType!]
  findManyPassType(after: String, before: String, first: Int, last: Int, skip: Int): [PassType!]
}
